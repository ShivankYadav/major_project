FROM ubuntu:18.04

ARG cuda_version=10.0
ARG cudnn_version=7
#FROM nvidia/cuda:${cuda_version}-cudnn${cudnn_version}-devel
FROM nvidia/cuda:10.0-runtime-ubuntu18.04
# Pin CuDNN 

ENV CUDNN_VERSION 7.6.5.32
LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

RUN apt-get update && apt-get install -y --no-install-recommends \
    libcudnn7=$CUDNN_VERSION-1+cuda10.0 \
    libcudnn7-dev=$CUDNN_VERSION-1+cuda10.0 \
    && apt-mark hold libcudnn7 libcudnn7-dev 


# Supress warnings about missing front-end. As recommended at:
# http://stackoverflow.com/questions/22466255/is-it-possibe-to-answer-dialog-questions-when-installing-under-docker
ARG DEBIAN_FRONTEND=noninteractive

# Install system packages
RUN apt-get update && apt-get install -y --no-install-recommends \
      bzip2 \
      g++ \
      git \
      graphviz \
      libgl1-mesa-glx \
      libhdf5-dev \
      openmpi-bin \
      wget 

RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-utils git curl vim unzip openssh-client wget \
    build-essential cmake \
    libopenblas-dev

# RUN add-apt-repository ppa:deadsnakes/ppa 
# RUN apt-get update && apt-get install python3.5-dev

RUN apt-get install -y --no-install-recommends python3 python3-dev python3-pip python3-tk && \
    pip3 install --no-cache-dir --upgrade pip setuptools && \
    echo "alias python='python3'" >> /root/.bash_aliases && \
    echo "alias pip='pip3'" >> /root/.bash_aliases

##### Proto2
RUN apt-get install -y --no-install-recommends \
    libjpeg8-dev libtiff5-dev \
    libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libgtk2.0-dev \
    liblapacke-dev checkinstall 

# # Install Python packages and keras
# ENV NB_USER app
# ENV NB_UID 1000

# RUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
#     mkdir -p /src && \
#     mkdir -p /workspace && \
#     chown $NB_USER /src && \
#     chown $NB_USER /workspace

# RUN rm -rf /var/lib/apt/lists/*

# USER $NB_USER

# WORKDIR /workspace


# Science libraries and other common packages
RUN pip3 --no-cache-dir install \
    numpy scipy scikit-image matplotlib Cython imgaug


EXPOSE 8888


RUN pip3 install \
      sklearn_pandas \
      tensorflow-gpu==1.13.1 \ 
      keras==2.2.4
# Expose port for TensorBoard
EXPOSE 6006

#proto3
RUN pip3 install --upgrade pip && pip install opencv-python

# jupyter 

RUN pip3 --no-cache-dir install jupyter && \
    mkdir /root/.jupyter && \
    echo "c.NotebookApp.ip = '*'" \
         "\nc.NotebookApp.open_browser = False" \
         "\nc.NotebookApp.token = ''" \
         > /root/.jupyter/jupyter_notebook_config.py
EXPOSE 8888

RUN pip3 install pandas matplotlib requests h5py

# Pillow and it's dependencies
RUN apt-get install -y --no-install-recommends libjpeg-dev zlib1g-dev && \
    pip3 --no-cache-dir install Pillow

#proto 4 

# PyCocoTools
#
# Using a fork of the original that has a fix for Python 3.
# I submitted a PR to the original repo (https://github.com/cocodataset/cocoapi/pull/50)
# but it doesn't seem to be active anymore.
RUN pip3 install --no-cache-dir git+https://github.com/waleedka/coco.git#subdirectory=PythonAPI

ENV TEMP_MRCNN_DIR /tmp/mrcnn
ENV TEMP_COCO_DIR /tmp/coco
ENV MRCNN_DIR /mrcnn


# RUN cd /tmp/pycoco/cocoapi/PythonAPI 
# RUN python3 setup.py install


# cloning matterport mask-RCNN
RUN git clone https://github.com/matterport/Mask_RCNN.git $TEMP_MRCNN_DIR

RUN git clone https://github.com/waleedka/coco.git $TEMP_COCO_DIR

RUN cd $TEMP_MRCNN_DIR && \
    python3 setup.py install

RUN cd $TEMP_COCO_DIR/PythonAPI && \
    sed -i "s/\bpython\b/python3/g" Makefile && \
    make

RUN mkdir -p $MRCNN_DIR/coco
CMD ["/bin/bash"]